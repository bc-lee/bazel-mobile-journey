name: Build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
# Required to allow the workflow to push commits back to PR branches
permissions:
  contents: write
  pull-requests: write
# Cancel in-progress builds if the same workflow is triggered again.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        bazel-version: ["default"]
        experimental: [false]
        include:
          - bazel-version: "7.x"
            experimental: true
          - bazel-version: "latest"
            experimental: false
          - bazel-version: "last_rc"
            experimental: true
          - bazel-version: "rolling"
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check bazel version
        id: check-bazel-version
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # latest or last_rc might be same as default. In this case we don't need to build at all.
          if [[ "${{ matrix.bazel-version }}" != "latest" && "${{ matrix.bazel-version }}" != "last_rc" ]]; then
            echo "do=1" >> "$GITHUB_OUTPUT"
            # "default" is not a valid version
            if [[ "${{ matrix.bazel-version }}" != "default" ]]; then
              echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
            fi
            exit 0
          fi

          # Don't run if the version is the same as the default version
          default_version=$(cat .bazelversion)
          version=$(tools/bazel_version.py ${{ matrix.bazel-version }})
          if [[ "$default_version" == "$version" ]]; then
            echo "do=0" >> "$GITHUB_OUTPUT"
          else
            echo "Use Bazel version $version"
            echo "do=1" >> "$GITHUB_OUTPUT"
            echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
          fi
      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          disk-cache: ${{ github.workflow }}-bazel-disk-cache-${{ matrix.bazel-version }}
      - name: Build
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          # Exclude iOS targets since they require Apple's toolchain which isn't available on Linux
          bazelisk build //... -- -//ios/...
      - name: Re-pin
        if: ${{ matrix.bazel-version == 'default' }}
        run: |
          REPIN=1 bazelisk run @android_deps//:pin
      - name: Auto-commit MODULE.bazel.lock for same-repo PRs
        if: ${{ matrix.bazel-version == 'default' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Only proceed if MODULE.bazel.lock changed
          if git diff --quiet -- MODULE.bazel.lock; then
            echo "No changes in MODULE.bazel.lock"
            exit 0
          fi

          # Fail early if other files changed, and do not push
          if git diff --name-only | grep -v '^MODULE\.bazel\.lock$' | grep -q .; then
            echo "Other change detected"
            exit 1
          fi

          git stash
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          git stash pop || (echo "Failed to pop stash, is PR branch too old?" && exit 1)
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add MODULE.bazel.lock
          git commit -m "chore: update MODULE.bazel.lock (auto-repin)"
          git push origin HEAD:${{ github.head_ref }}
      - name: Ensure nothing changed
        if: ${{ matrix.bazel-version == 'default' }}
        run: |
          git diff --stat --exit-code
  build-macos:
    strategy:
      fail-fast: false
      matrix:
        bazel-version: ["default"]
        experimental: [false]
        include:
          - bazel-version: "7.x"
            experimental: true
          - bazel-version: "latest"
            experimental: false
          - bazel-version: "last_rc"
            experimental: true
          - bazel-version: "rolling"
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v5
      - name: Check bazel version
        id: check-bazel-version
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # latest or last_rc might be same as default. In this case we don't need to build at all.
          if [[ "${{ matrix.bazel-version }}" != "latest" && "${{ matrix.bazel-version }}" != "last_rc" ]]; then
            echo "do=1" >> "$GITHUB_OUTPUT"
            # "default" is not a valid version
            if [[ "${{ matrix.bazel-version }}" != "default" ]]; then
              echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
            fi
            exit 0
          fi

          # Don't run if the version is the same as the default version
          default_version=$(cat .bazelversion)
          version=$(tools/bazel_version.py ${{ matrix.bazel-version }})
          if [[ "$default_version" == "$version" ]]; then
            echo "do=0" >> "$GITHUB_OUTPUT"
          else
            echo "Use Bazel version $version"
            echo "do=1" >> "$GITHUB_OUTPUT"
            echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
          fi
      - name: Set up Xcode stable
        uses: maxim-lobanov/setup-xcode@7f352e61cbe8130c957c3bc898c4fb025784ea1e
        with:
          xcode-version: latest-stable
      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          disk-cache: ${{ github.workflow }}-bazel-disk-cache-${{ matrix.bazel-version }}
      - name: Build
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          bazelisk build //ios/... --apple_platform_type=ios --platforms=@build_bazel_apple_support//platforms:ios_sim_arm64
      - name: Ensure we have an app
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          set -e
          find bazel-out/ -type f -name "SimpleSwiftApp.ipa" || (echo "No ipa found" && exit 1)
