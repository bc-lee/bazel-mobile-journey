name: Build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
# Cancel in-progress builds if the same workflow is triggered again.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        bazel-version: ["default"]
        experimental: [false]
        include:
          - bazel-version: "7.x"
            experimental: true
          - bazel-version: "latest"
            experimental: false
          - bazel-version: "last_rc"
            experimental: true
          - bazel-version: "rolling"
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check bazel version
        id: check-bazel-version
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # latest or last_rc might be same as default. In this case we don't need to build at all.
          if [[ "${{ matrix.bazel-version }}" != "latest" && "${{ matrix.bazel-version }}" != "last_rc" ]]; then
            echo "do=1" >> "$GITHUB_OUTPUT"
            # "default" is not a valid version
            if [[ "${{ matrix.bazel-version }}" != "default" ]]; then
              echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
            fi
            exit 0
          fi

          # Don't run if the version is the same as the default version
          default_version=$(cat .bazelversion)
          version=$(tools/bazel_version.py ${{ matrix.bazel-version }})
          if [[ "$default_version" == "$version" ]]; then
            echo "do=0" >> "$GITHUB_OUTPUT"
          else
            echo "Use Bazel version $version"
            echo "do=1" >> "$GITHUB_OUTPUT"
            echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
          fi
      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          disk-cache: ${{ github.workflow }}-bazel-disk-cache-${{ matrix.bazel-version }}
      - name: Build
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          # Exclude iOS targets since they require Apple's toolchain which isn't available on Linux
          bazelisk build //... -- -//ios/...
      - name: Re-pin
        if: ${{ matrix.bazel-version == 'default' }}
        run: |
          REPIN=1 bazelisk run @android_deps//:pin
      - name: Ensure nothing changed
        if: ${{ matrix.bazel-version == 'default' }}
        run: |
          git diff --stat --exit-code
  build-macos:
    strategy:
      fail-fast: false
      matrix:
        bazel-version: ["default"]
        experimental: [false]
        include:
          - bazel-version: "7.x"
            experimental: true
          - bazel-version: "latest"
            experimental: false
          - bazel-version: "last_rc"
            experimental: true
          - bazel-version: "rolling"
            experimental: true
    continue-on-error: ${{ matrix.experimental == true }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check bazel version
        id: check-bazel-version
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # latest or last_rc might be same as default. In this case we don't need to build at all.
          if [[ "${{ matrix.bazel-version }}" != "latest" && "${{ matrix.bazel-version }}" != "last_rc" ]]; then
            echo "do=1" >> "$GITHUB_OUTPUT"
            # "default" is not a valid version
            if [[ "${{ matrix.bazel-version }}" != "default" ]]; then
              echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
            fi
            exit 0
          fi

          # Don't run if the version is the same as the default version
          default_version=$(cat .bazelversion)
          version=$(tools/bazel_version.py ${{ matrix.bazel-version }})
          if [[ "$default_version" == "$version" ]]; then
            echo "do=0" >> "$GITHUB_OUTPUT"
          else
            echo "Use Bazel version $version"
            echo "do=1" >> "$GITHUB_OUTPUT"
            echo "USE_BAZEL_VERSION=${{ matrix.bazel-version }}" >> "$GITHUB_ENV"
          fi
      - name: Set up Xcode stable
        uses: maxim-lobanov/setup-xcode@7f352e61cbe8130c957c3bc898c4fb025784ea1e
        with:
          xcode-version: latest-stable
      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        env:
          BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          disk-cache: ${{ github.workflow }}-bazel-disk-cache-${{ matrix.bazel-version }}
      - name: Build
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          bazelisk build //ios/... --apple_platform_type=ios
      - name: Ensure we have an app
        if: ${{ steps.check-bazel-version.outputs.do == '1' }}
        run: |
          set -ex
          find bazel-out/ -name "SimpleSwiftApp*"
          find bazel-out/ -name "*.app" | grep -E ".app" || (echo "No app found" && exit 1)
